@PizzaMauiApp.API_HostAddress = http://localhost:5290/api

< {%
    client.global.clearAll()
    client.global.set("user_email", "brice@fake.com");
    client.global.set("user_password", "Pa$$w0rd!!");
%}

# Register account
POST {{PizzaMauiApp.API_HostAddress}}/Accounts/register/
Content-Type: application/json

{
	"displayName": "Brice",
	"email": "{{user_email}}",
	"password": "{{user_password}}"
}
> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Account successfully created and token returned ", function () {
        client.assert(response.body.success === true, "Account has not been created");
        client.assert(response.body.data.hasOwnProperty("token"), "Cannot find 'token' option in response");
        client.assert(response.body.data.hasOwnProperty("refreshToken"), "Cannot find 'refreshToken' option in response");
        client.assert(response.body.data.token != undefined, "access token is empty")
        client.assert(response.body.data.refreshToken != undefined, "refresh token is empty")
    });
%}

###
# Login with previously registered account
POST {{PizzaMauiApp.API_HostAddress}}/Accounts/login
Content-Type: application/json

{
	"email": "{{user_email}}",
	"password": "{{user_password}}"
}
> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });
    client.test("Request returned token", function () {
        client.assert(response.body.data.hasOwnProperty("token"), "Cannot find 'token' option in response");
        client.assert(response.body.data.hasOwnProperty("refreshToken"), "Cannot find 'refreshToken' option in response");
        client.assert(response.body.data.token != undefined, "access token is empty")
        client.assert(response.body.data.refreshToken != undefined, "refresh token is empty")
    });
    client.global.set("auth_token", response.body.data.token);
    client.global.set("user_id", response.body.data.id);
%}

###

< {%
    client.global.set("firstName", "Brice");
    client.global.set("lastName", "De nice");
    client.global.set("street", "100 Park Lane");
    client.global.set("city", "Birmingham");
    client.global.set("state", "West Midlands");
    client.global.set("zipcode", "B4 7BA");
%}

#Add Address
PUT {{PizzaMauiApp.API_HostAddress}}/Accounts/address/
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "id": "{{user_id}}",
  "firstName": "{{firstName}}",
  "lastName": "{{lastName}}",
  "street": "{{street}}",
  "city": "{{city}}",
  "state": "{{state}}",
  "zipcode": "{{zipcode}}"
}
> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });
    client.test("Address fields have correctly been added", function () {
        client.assert(response.body.data.firstName === client.global.get("firstName"), "firstname is not added correctly")
        client.assert(response.body.data.lastName === client.global.get("lastName"), "lastName is not added correctly")
        client.assert(response.body.data.street === client.global.get("street"), "street is not added correctly")
        client.assert(response.body.data.city === client.global.get("city"), "city is not added correctly")
        client.assert(response.body.data.state === client.global.get("state"), "state is not added correctly")
        client.assert(response.body.data.zipcode === client.global.get("zipcode"), "zipcode is not added correctly")
    });
%}

###

< {%
    client.global.set("firstName", "Briceeeee");
%}
#Update Address
PUT {{PizzaMauiApp.API_HostAddress}}/Accounts/address/
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "id": "{{user_id}}",
  "firstName": "{{firstName}}",
  "lastName": "{{lastName}}",
  "street": "{{street}}",
  "city": "{{city}}",
  "state": "{{state}}",
  "zipcode": "{{zipcode}}"
}
> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });
    client.test("Check address firstName if correctly updated and the other fields should have not changed", function () {
        client.assert(response.body.data.firstName === client.global.get("firstName"), "firstname has not been updated!")
        client.assert(response.body.data.lastName === client.global.get("lastName"), "lastName should not be updated?")
        client.assert(response.body.data.street === client.global.get("street"), "street should not be updated?")
        client.assert(response.body.data.city === client.global.get("city"), "city should not be updated?")
        client.assert(response.body.data.state === client.global.get("state"), "state should not be updated?")
        client.assert(response.body.data.zipcode === client.global.get("zipcode"), "zipcode should not be updated?")
    });
%}

###
# Get home address for a user id
GET {{PizzaMauiApp.API_HostAddress}}/Accounts/address?id={{user_id}}
Content-Type: application/json
Authorization: Bearer {{auth_token}}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });
    client.test("Check if address object for a user id is returned", function () {
        client.assert(response.body.data.firstname === client.global.get("firstname"), "firstname value is not the one expected")
        client.assert(response.body.data.lastName === client.global.get("lastName"), "lastName value is not the one expected")
        client.assert(response.body.data.street === client.global.get("street"), "street value is not the one expected")
        client.assert(response.body.data.city === client.global.get("city"), "city value is not the one expected")
        client.assert(response.body.data.state === client.global.get("state"), "state value is not the one expected")
        client.assert(response.body.data.zipcode === client.global.get("zipcode"), "zipcode value is not the one expected")
    });

%}